# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Transaction {
  id: ID!
  reciever: User!
  recieverId: Int!
  sender: User!
  senderId: Int!
  amount: Int!
  sourceCurrency: String!
  targetCurrency: String!
  exchangeRate: Float!
  status: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Balance {
  id: ID!
  user: User!
  userId: Int!
  amount: Float!
  currency: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserCount {
  transactionsTo: Int!
  transactionsFrom: Int!
  Balance: Int!
}

type User {
  id: ID!
  email: String!
  name: String!
  password: String!
  transactionsTo: [Transaction!]
  transactionsFrom: [Transaction!]
  createdAt: DateTime!
  updatedAt: DateTime!
  Balance: [Balance!]
  _count: UserCount!
}

type UserBalances {
  USD: Int!
  EUR: Int!
  GBP: Int!
}

type Query {
  findAllUsers: [User!]!
  findUserById(userId: Float!): User!
  findUserByEmail(email: String!): User!
  me: User
  getUserBalances: UserBalances!
  getUserTransactions: [Transaction!]!
}

type Mutation {
  signup(input: UserCreateInput!): User!
  login(input: LoginInput!): User!
  logout: Boolean!
  removeFromBalance(currency: String!, value: Float!, userId: Float!): Boolean!
  sendMoney(input: SendMoneyInput!): Boolean!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
  transactionsTo: TransactionCreateNestedManyWithoutRecieverInput
  transactionsFrom: TransactionCreateNestedManyWithoutSenderInput
  Balance: BalanceCreateNestedManyWithoutUserInput
}

input TransactionCreateNestedManyWithoutRecieverInput {
  create: [TransactionCreateWithoutRecieverInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutRecieverInput!]
  createMany: TransactionCreateManyRecieverInputEnvelope
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutRecieverInput {
  amount: Int!
  sourceCurrency: String!
  targetCurrency: String!
  exchangeRate: Float!
  status: Int!
  createdAt: DateTime
  updatedAt: DateTime
  sender: UserCreateNestedOneWithoutTransactionsFromInput!
}

input UserCreateNestedOneWithoutTransactionsFromInput {
  create: UserCreateWithoutTransactionsFromInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionsFromInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTransactionsFromInput {
  email: String!
  name: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
  transactionsTo: TransactionCreateNestedManyWithoutRecieverInput
  Balance: BalanceCreateNestedManyWithoutUserInput
}

input BalanceCreateNestedManyWithoutUserInput {
  create: [BalanceCreateWithoutUserInput!]
  connectOrCreate: [BalanceCreateOrConnectWithoutUserInput!]
  createMany: BalanceCreateManyUserInputEnvelope
  connect: [BalanceWhereUniqueInput!]
}

input BalanceCreateWithoutUserInput {
  amount: Float!
  currency: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input BalanceCreateOrConnectWithoutUserInput {
  where: BalanceWhereUniqueInput!
  create: BalanceCreateWithoutUserInput!
}

input BalanceWhereUniqueInput {
  id: Int
}

input BalanceCreateManyUserInputEnvelope {
  data: [BalanceCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input BalanceCreateManyUserInput {
  id: Int
  amount: Float!
  currency: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutTransactionsFromInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutTransactionsFromInput!
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

input TransactionCreateOrConnectWithoutRecieverInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutRecieverInput!
}

input TransactionWhereUniqueInput {
  id: Int
}

input TransactionCreateManyRecieverInputEnvelope {
  data: [TransactionCreateManyRecieverInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyRecieverInput {
  id: Int
  senderId: Int!
  amount: Int!
  sourceCurrency: String!
  targetCurrency: String!
  exchangeRate: Float!
  status: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input TransactionCreateNestedManyWithoutSenderInput {
  create: [TransactionCreateWithoutSenderInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutSenderInput!]
  createMany: TransactionCreateManySenderInputEnvelope
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutSenderInput {
  amount: Int!
  sourceCurrency: String!
  targetCurrency: String!
  exchangeRate: Float!
  status: Int!
  createdAt: DateTime
  updatedAt: DateTime
  reciever: UserCreateNestedOneWithoutTransactionsToInput!
}

input UserCreateNestedOneWithoutTransactionsToInput {
  create: UserCreateWithoutTransactionsToInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionsToInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTransactionsToInput {
  email: String!
  name: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
  transactionsFrom: TransactionCreateNestedManyWithoutSenderInput
  Balance: BalanceCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutTransactionsToInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutTransactionsToInput!
}

input TransactionCreateOrConnectWithoutSenderInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutSenderInput!
}

input TransactionCreateManySenderInputEnvelope {
  data: [TransactionCreateManySenderInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManySenderInput {
  id: Int
  recieverId: Int!
  amount: Int!
  sourceCurrency: String!
  targetCurrency: String!
  exchangeRate: Float!
  status: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input LoginInput {
  email: String!
  password: String!
}

input SendMoneyInput {
  senderId: Int!
  recieverEmail: String!
  amount: Int!
  exchangeRate: Float!
  sourceCurrency: String!
  targetCurrency: String!
}
